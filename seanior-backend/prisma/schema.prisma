// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  user_id      String   @id @default(cuid())
  firebase_uid String   @unique
  email        String   @unique
  name         String?
  password     String?
  gender       String?
  address      String?
  phone_number String?  @unique
  profile_img  String?
  user_type    String?
  description  Json?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // One-to-many relation
  swimming_courses swimming_course[]
  request          request[] @relation("StudentRequests")
  recorded_attendances attendance[] @relation("AttendanceRecorder")
  resource         resource[]
  instructor_requests instructor_request[]
  notifications    notification[]
  bookings         Booking[] @relation("CustomerBookings")
}

model resource {
  resource_id   String   @id @default(cuid())
  user_id       String
  user          user     @relation(fields: [user_id], references: [user_id])
  resource_name String
  resource_type String
  resource_url  String
  resource_size Float
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model instructor_request {
  request_id              String   @id @default(cuid())
  user_id                 String
  user                    user     @relation(fields: [user_id], references: [user_id])
  full_name               String
  phone_number            String
  address                 String
  profile_image           String
  date_of_birth           DateTime
  education_record        String
  id_card_url             String
  contact_channels        Json // { "line": "...", "facebook": "...", "instagram": "..." }
  swimming_instructor_license String
  teaching_history        String?
  additional_skills        String?
  status                  String   @default("pending") // "pending", "approved", "rejected"
  rejection_reason        String?  
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt
}

model swimming_course {
course_id                String   @id @default(cuid())
  course_name              String                          // ← title
  instructor_id            String                          // ← ref to user.user_id
  instructor               user     @relation(fields: [instructor_id], references: [user_id])
  price                    Int
  pool_type                String                          // ← courseType
  location                 String                          // ← location.address
  description              String                          // ← focus
  course_duration          Int                              // ← duration in weeks (parse from "8 weeks")
  study_frequency          String                          // ← studyFrequency
  days_study               Int
  number_of_total_sessions Int
  allowed_absence_buffer   Int? @default(2)
  level                    String                          // ← level (Intermediate, etc.)
  schedule                 Json                            // ← schedule
  rating                   Float    @default(0.0)           // ← rating
  students                 Int      @default(0)             // ← students
  max_students             Int                               // ← maxStudents
  course_image             String?                           // ← course image path
  pool_image               String?                           // ← pool image path
  created_at               DateTime @default(now())
  updated_at               DateTime @updatedAt

  request request[]

  bookings     Booking[]
}


model request {
  request_id                String          @id @default(cuid())
  course_id                 String
  Course                    swimming_course @relation(fields: [course_id], references: [course_id])
  student_id                String
  student                   user     @relation("StudentRequests", fields: [student_id], references: [user_id])
  request_price             Int
  request_location          String
  status                    RequestStatus @default(PENDING_APPROVAL)
  request_date              DateTime
  requestDayOfWeek          String
  requestTimeSlot           String  
  created_at                DateTime        @default(now())
  updated_at                DateTime        @updatedAt

  // One-to-one relation (must be unique on the other side)
  enrollment enrollment?
  booking    Booking?   @relation("RequestToBooking")
}

model enrollment {
  enrollment_id String   @id @default(cuid())
  request_id    String   @unique
  request       request  @relation(fields: [request_id], references: [request_id])
  start_date    DateTime
  end_date      DateTime?
  status        EnrollmentStatus @default(ACTIVE)
  request_date  DateTime
  target_sessions_to_complete Int    // จำนวนครั้งที่ตั้งเป้าว่าต้องเรียนครบ (ดึงมาจาก course.number_of_total_sessions)
  max_sessions_allowed      Int    // จำนวนครั้งสูงสุดที่อนุญาตให้มาเรียน (target_sessions_to_complete + course.allowed_absence_buffer)
  actual_sessions_attended  Int    @default(0) // จำนวนครั้งที่มาเรียนจริงๆ
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // One-to-one relation
  review           review?
  // One-to-many relation
  attendance       attendance[] // ชื่อ Relation นี้จะถูก Prisma ตั้งให้โดยอัตโนมัติ หรือคุณจะตั้งเองก็ได้
  payment          payment[]
  session_progress session_progress[]
}

// --- ADD THIS ENUM (ถ้ายังไม่มี) ---
enum EnrollmentStatus {
  ACTIVE      // กำลังเรียนอยู่
  COMPLETED   // เรียนจบแล้ว (ครบตามเป้า หรือ ใช้โควต้าหมด)
  CANCELLED   // ยกเลิกกลางคัน
  // เพิ่มสถานะอื่นๆ ตามต้องการ
}

model review {
  review_id     String     @id @default(cuid())
  enrollment_id String     @unique
  enrollment    enrollment @relation(fields: [enrollment_id], references: [enrollment_id])
  rating        Int
  comment       String
  review_date   DateTime
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
}

model attendance {
  attendance_id      String     @id @default(cuid())
  enrollment_id      String
  enrollment         enrollment @relation(fields: [enrollment_id], references: [enrollment_id], onDelete: Cascade) // เพิ่ม onDelete: Cascade ถ้าต้องการให้ลบ attendance เมื่อ enrollment ถูกลบ

  session_number     Int        // ครั้งที่ของเซสชัน (เช่น 1, 2, 3, ...)
  attendance_status  AttendanceStatus // ใช้ Enum

  reason_for_absence String?    // เหตุผลการขาดเรียน (ถ้ามี)
  date_attendance    DateTime   // วันที่และเวลาของเซสชันที่เช็คชื่อ (Instructor อาจจะกรอก หรือระบบคำนวณให้)

  recorded_by_id     String     // ID ของ User ที่บันทึก (ควรเป็น Instructor/Admin)
  recorded_by        user       @relation("AttendanceRecorder", fields: [recorded_by_id], references: [user_id]) // ตั้งชื่อ Relation ใหม่

  created_at         DateTime   @default(now())
  updated_at         DateTime   @updatedAt

  // ป้องกันการบันทึกซ้ำสำหรับ enrollment เดียวกันและ session เดียวกัน
  @@unique([enrollment_id, session_number])
  @@map("attendances") // ถ้าต้องการชื่อตารางเป็น attendances
}

enum AttendanceStatus {
  PRESENT // มาเรียน
  ABSENT  // ขาดเรียน (ไม่มีเหตุผล)
  LATE    // มาสาย
  EXCUSED // ลา (มีเหตุผล)
  // เพิ่มสถานะอื่นๆ ตามต้องการ
}

model payment {
  payment_id     String     @id @default(cuid())
  session_number Int
  enrollment_id  String
  enrollment     enrollment @relation(fields: [enrollment_id], references: [enrollment_id])
  payment_date   DateTime
  payment_status String
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt
}

model session_progress {
  session_progress_id String     @id @default(cuid())
  enrollment_id       String
  enrollment          enrollment @relation(fields: [enrollment_id], references: [enrollment_id])
  session_number      Int
  topic_covered       String
  performance_notes   String
  attendance          String
  date_session        DateTime
  created_at          DateTime   @default(now())
  updated_at          DateTime   @updatedAt
}

model notification {
  notification_id    String   @id @default(cuid())
  user_id            String
  user               user     @relation(fields: [user_id], references: [user_id])
  type               String   // e.g., "instructor_request_created", "instructor_request_approved"
  message            String
  is_read            Boolean  @default(false)
  related_entity_id  String?  // e.g., request_id for instructor requests
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
}

enum BookingStatus {
  PENDING_PAYMENT
  CONFIRMED
  FAILED
  CANCELLED
}

enum RequestStatus {
  PENDING_APPROVAL         
  APPROVED_PENDING_PAYMENT 
  REJECTED_BY_INSTRUCTOR   
  PAID_AND_ENROLLED        
  CANCELLED_BY_STUDENT     
}

// --- เพิ่ม Model นี้ ---
model Booking {
  id                      String        @id @default(cuid())
  status                  BookingStatus @default(PENDING_PAYMENT)
  amount                  Int           
  currency                String        @default("thb")
  stripeCheckoutSessionId String?       @unique 
  courseId                String        
  course                  swimming_course @relation(fields: [courseId], references: [course_id]) // เชื่อมไปที่ swimming_course โดยใช้ course_id

  userId                  String?       
  user                    user?         @relation("CustomerBookings", fields: [userId], references: [user_id]) 
  requestId               String?       @unique // ทำให้ 1 request มีได้แค่ 1 booking
  request                 request?      @relation("RequestToBooking", fields: [requestId], references: [request_id])

  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt

  @@map("bookings") // ชื่อตารางใน Database คือ bookings
}